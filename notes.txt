transfer

state	1B	uint8_t

ONLINE			xxxxxxx1
TRANSFER_REQ	xxxxxx1x
OFF_RESTART		xxxxx1xx
STAND_BY_STATE	0000xxxx
INIT_STATE    	0001xxxx	returnTap
STAB_STATE     	0010xxxx	minHeat
HEAD_STATE     	0011xxxx	outTap, headHeat
PRE_BODY_STATE 	0100xxxx	
BODY_STATE     	0101xxxx	outTap, bodyHeat
PRE_TAIL_STATE 	0110xxxx	outTap, rf, tailHeat
INISH_STATE		0111xxxx
CANCEL_STATE	1000xxxx
ERROR_STATE   	1111xxxx

rf-sw-lo-hi-over	1B	uint8_t
	lo		xxxxxxx1
	hi		xxxxxx1x
	over	xxxxx1xx
	sw		xxxx1xxx
	rf		0011xxxx

alc		2B	int16_t	raw sensor value
tr1		4B	float
tr2		4B	float
tr3		4B	float
pres	12B	float float	float pres envTemp tblTemp
heat	2B	uint8_t uint8_t power adjStep
mtr1	2B	int16_t
mtr2	2B	int16_t
mtr3	2B	int16_t
adjExt	2B	int16_t
adjCool	2B	int16_t
sesN	4B	uint32_t

pin map

//bar		3.3V GND 20 21
//tr 		2
ssr		3
//alc		4 a0
//hlvl	5 a1 a2 a3
mtr 	22-37
spi		50-53
reset pin 49 @ MEGA, a5 @ UNO
megaSlaveSelect 4 @ UNO


Синхронизация

со стороны mega происходит проверка зависания, uno отвечает. 
если ответ не приходит - mega перезагружает uno.
если mega не отправляет сигнал через ожидаемое время + задержка - uno перезагружает mega.

через больший промежуток времени проводится передача показаний всех сенсоров и управляющих элементов для записи в журнал.

если один из сенсоров или управляющих элементов вышел из строя - соответствующие данные будут равны нолю.

mega использует для отладки журнал serial
uno использует для записи файл на sd карте. имя файла YYYYMMDD.LOG
номер сессии хранится в памяти mega в виде uint32_t и синхронизируется.
после зависания в процессе работы сессия восстанавливается с этим номером

Журнал

хранит записи с меткой времени и данными сенсоров и управляющих устройств.
запись в журнал производится по завершению синхронизации с минимально необходимой периодичностью по интерфейсу spi.

после каждого этапа подводится итог выполнения - продолжительность, средние и ключевые значения данных.
при завершении сессии подводится общий итог.
в начале каждой сессии считываются итоги предыдущей как ожидаемые значения.
эти значения преобразовуются с учетом используемых закономерностей и принимают участие в инициализации
после этого система готова начать работу.
если сессия была отменена, в конце журнала производится соответствующая запись.

Этапы работы

ожидание

нагрев выключен. кран отбора закрыт, охлаждение включено. сессия неактивна.

инициализация

создается новая сессия, считываются данные предыдущей, передаются в соответствующие конструкторы.
охлаждение работает, кран отбора закрыт, кран возврата открыт на рабочее значение для отбора голов 300мл/ч.
нагрев максимальный. условие перехода на следующий этап - уровень флегмы достигает нижней отметки.

стабилизация

нагрев минимальный для кипения. измеряется температура пара и записывается в массив.
условие перехода на следующий этап - стабильность температуры в течение определенного времени.
ссылаться на табличную температуру + разница в большую сторону.

отбор головных фракций

кран отбора открыт. начальная скорость 100 мл/ч.
скачки температуры пара свидетельствуют о переохлаждении флегмы. температура холодильника 50°С.
уровень флегмы держится между отметками гидроуровня. контролируется нагревом. начальный нагрев минимален.
условие перехода на следующий этап - показания датчика алкоголя
кран отбора закрыт. дождаться вытока конденсата в приемную тару.

подготовка к отбору продукта

дождаться стабилизации тепмературы пара. она будет на 0.1-0.2°С выше.
запомнить значение как контрольную температуру. сравнить с табличной, вычислить погрешность.
сменить приемную тару.
условие перехода на следующий этап - стабилизация температуры пара.

отбор продукта

кран отбора открыт. начальная скорость 550 мл/ч. флегмовое число 3.
нагрев контролирует уровень флегмы.
если температура пара стабильна - запомнить значения и попробовать увеличить скорость отбора.
повторять до потери стабильности. вернуться к предыдущим значениям.
если температура пара возрастает на 0.1°С, закрыть кран отбора и дождаться стабилизации. 
если температура в трубе возрастает - уменьшать скорость отбора.
запоминать время стабилизации.
регистрировать изменения давления.
перепроверять контрольную температуру пара каждый час. для этого закрыть кран отбора и подождать стабилизации (измеренное время или 10 минут?)
условие перехода на следующий этап - возрастание температуры в трубе.

подготовка к завершению

закрыть кран отбора. уменьшить нагрев и скорость отбора, увеличить флегмовое число. подождать стабилизации.
при отладке использовать отдельную приемную тару.
условие перехода на следующий этап - температура в трубе не уменьшается.

завершение

кран отбора закрыт, кран возврата открыт на максимум. нагрев выключен.
дождаться падения температуры в трубе на 2°С. вернуть краны и переключатель тары в начальное положение.
записать в журнал итоги.

ошибка

независимо от этапа выполняется проверка переполнения гидроуровня и доступности функциональных элементов системы.
если происходит переполнение, нагрев выключается и кран возврата открывается на полную. ожидается уменьшение уровня флегмы ниже верхнего значения,
после чего включается уменьшенный нагрев. краны возвращаются в рабочее положение.


Критические условия

Остановить процесс с записью в журнал, если
ход крана охлаждения достиг предела, но температура флегмы не понижается
сработал датчик переполнения
любой из элементов не отвечает, элементы управления не реагируют на команды

Максимум

кран отбора -> уменьшить нагрев
реле -> уменьшить отбор
кран возврата -> уменьшить нагрев
кран охлаждения -> уменьшить нагрев


todo

Сенсоры
Управляющие элементы
Логика управления
Синхронизация
Журнал
Графический интерфейс
Ручной режим

опрос датчиков температуры 650 мс - быстро
управление с измеренной инерционностью
запоминать стабильное значение

alc: init debug, measure time, optimize and calibrate levels
hlev: init, test getsyncarray, fit resistors
bar: debug
therm: debug 
mtr: calibrate maxPosition, mlToSteps
heater: debug calibrate, default adjStep, powerHead, powerBody
measure request and receive time, and values in debug methods

introduce init time
imsensor cpp

states
session + time counter + src vol + output counter
sync
timer - provides log stamp and time measurements. 
logger - serial @ mega and writes file @ uno
ui
assemble and debug

int -> int32_t
все расчеты с промежуточными переменными
stdint.h
arduino.h только в хедер

измерить время ответа на изменение мощности нагрева,
 скорости отбора, обратного отбора, охлаждения, выхода продукта из доохладителя
измерить минимальную мощность нагрева
если в течение расчетного времени + задержка не появляется нагрев - вывести ошибку no heat
предусмотреть сообщения о выходе из строя компонентов
сумма всех исходящих токов платы не должна превышать 200 мА


IMTime time
IMLogger sd 20181207 8.3 .LOG .EXP
motors
rfratio control logic
calibrate reflux ratio = 3

схема для гидроуровня

log structure:

time unsigned long 4B as integer
state	uint8_t 1B	as binary
rf-sw-lo-hi-ovr uint8_t 1B as binary
alc int16_t 2B as integer
tr1		4B	float	as decimal
tr2		4B	float	as decimal
tr3		4B	float	as decimal
pres	12B	float float	float pres envTemp tblTemp as decimal
heat	2B	uint8_t uint8_t power adjStep as integer
mtr1	2B	int16_t	as integer
mtr2	2B	int16_t	as integer
mtr3	2B	int16_t as integer
adjExt	2B	int16_t	as integer
adjCool	2B	int16_t	as integer

state init values

heat	uint8_t 1B as integer
outTap int16_t 2B as integer
returnTap int16_t 2B as integer
rf	uint8_t 1B as integer


master отправляет массив пустых значений, принимает показания датчиков.
если master отправил 
при заполнении массива значениями на стороне slave выставляется соответствующий статус.
последующий 
